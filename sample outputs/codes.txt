# reports/views.py
from django.shortcuts import render
import matplotlib.pyplot as plt
from main.models import EnergyConsumption, EnergyProduct
import pandas as pd
from django.db.models import Sum
from calendar import month_name
import os
from django.db.models.functions import TruncMonth

# Directory for energy report chart
report_directory = 'static/reports'
os.makedirs(report_directory, exist_ok=True)

def generate_energy_report(request):
    # Retrieve data from the EnergyConsumption model
    consumption_data = EnergyConsumption.objects.all()

    # Example: Calculate total consumption per product
    product_data = EnergyProduct.objects.all()
    consumption_by_product = {}
    for product in product_data:
        product_consumption = consumption_data.filter(product=product)
        total_consumption = sum([entry.units_consumed for entry in product_consumption])
        consumption_by_product[product.name] = total_consumption

    # Create a bar chart
    plt.figure(figsize=(10, 6))
    plt.bar(consumption_by_product.keys(), consumption_by_product.values())
    plt.xlabel('Energy Product')
    plt.ylabel('Total Consumption')
    plt.title('Energy Consumption by Product')
    plt.xticks(rotation=45)
    plt.tight_layout()

    # Save the chart to a file
    chart_file = 'static/reports/energy_report.png'
    plt.savefig('static/reports/energy_report.png')
    plt.close()

    # Check if the chart file exists
    if os.path.exists(chart_file):
        return render(request, 'reports/energy_report.html', {'chart_file': chart_file})
    else:
        return render(request, 'reports/energy_report_no_file.html')

def generate_consumption_graph(request):
    # Retrieve data from the EnergyConsumption model
    consumption_data = EnergyConsumption.objects.all()

    # Example: Create a time series line chart
    consumption_df = pd.DataFrame(list(consumption_data.values('consumption_date', 'units_consumed')))
    consumption_df['consumption_date'] = pd.to_datetime(consumption_df['consumption_date'])
    
    plt.figure(figsize=(12, 6))
    plt.plot(consumption_df['consumption_date'], consumption_df['units_consumed'], marker='o')
    plt.xlabel('Date')
    plt.ylabel('Units Consumed')
    plt.title('Energy Consumption Over Time')
    plt.grid(True)
    
    # Save the chart to a file
    chart_file = 'static/reports/consumption_graph.png'
    plt.savefig('static/reports/consumption_graph.png')
    plt.close()

    # Check if the chart file exists
    if os.path.exists(chart_file):
        return render(request, 'reports/consumption_graph.html', {'chart_file': chart_file})
    else:
        return render(request, 'reports/consumption_graph.html')
    
def monthly_consumption(request):
    # Retrieve data from the EnergyConsumption model
    consumption_data = EnergyConsumption.objects.annotate(
        month=TruncMonth('consumption_date')
    ).values('month').annotate(total_consumption=Sum('units_consumed'))

    # Create a line chart for monthly consumption
    labels = [month['month'].strftime('%B %Y') for month in consumption_data]
    data = [month['total_consumption'] for month in consumption_data]

    return render(request, 'reports/monthly_consumption.html', {'labels': labels, 'data': data})

def product_comparison(request):
    product_data = EnergyProduct.objects.all()
    product_consumption = {}
    
    for product in product_data:
        product_consumption[product.name] = EnergyConsumption.objects.filter(product=product).aggregate(total_consumption=Sum('units_consumed'))

    # Sort products by consumption
    sorted_products = sorted(product_consumption.items(), key=lambda x: x[1]['total_consumption'], reverse=True)

    return render(request, 'reports/product_comparison.html', {'sorted_products': sorted_products})

# Utility function to get month name
def get_month_name(month):
    return month_name[month]

def energy_efficiency(request):
    # Calculate energy efficiency of each product
    product_data = EnergyProduct.objects.all()
    efficiency_data = []

    for product in product_data:
        efficiency = calculate_efficiency(product)
        efficiency_data.append({'product': product, 'efficiency': efficiency})

    return render(request, 'reports/energy_efficiency.html', {'efficiency_data': efficiency_data})

# Utility function to calculate energy efficiency
def calculate_efficiency(product):
    # Get all consumption entries for the given product
    consumptions = EnergyConsumption.objects.filter(product=product)

    # Calculate total energy consumed
    total_energy_consumed = sum(consumption.units_consumed for consumption in consumptions)

    # Your logic for calculating energy efficiency based on the above data
    # For this case, let's assume efficiency is the total energy consumed
    # divided by the number of consumption entries.
    if consumptions.count() > 0:
        efficiency_value = total_energy_consumed / consumptions.count()
    else:
        efficiency_value = 0  # Handle the case when there are no consumption entries.

    return efficiency_value


from django.contrib.auth import login, logout
from django.shortcuts import render, redirect
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.decorators import login_required
from .forms import CustomAuthenticationForm 
from django.contrib.auth.forms import AuthenticationForm

def login_view(request):
    if request.method == 'POST':
        form = AuthenticationForm(data=request.POST)
        if form.is_valid():
            user = form.get_user()
            login(request, user)
            return redirect('home')  # Redirect to the desired page after login
    else:
        form = AuthenticationForm()
    return render(request, 'registration/login.html', {'form': form})

def logout_view(request):
    logout(request)
    return redirect('home')  # Redirect to the desired page after logout

@login_required
def profile(request):
    return render(request, 'registration/profile.html')

def register(request):
    if request.method == 'POST':
        form = UserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)  # Log the user in after registration
            return redirect('home')  # Redirect to the desired page after registration
    else:
        form = UserCreationForm()
    return render(request, 'registration/register.html', {'form': form})


# main/views.py
from django.shortcuts import render, redirect, get_object_or_404
from .models import EnergyProduct, EnergyConsumption, Consumer
from .forms import EnergyProductForm, EnergyConsumptionForm, ConsumerForm
from django.contrib.auth.decorators import login_required

def home(request):
    return render(request, 'home.html')

@login_required
def create_energy_product(request):
    if request.method == 'POST':
        form = EnergyProductForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('list_energy_products')
    else:
        form = EnergyProductForm()
    return render(request, 'main/create_energy_product.html', {'form': form})

@login_required
def list_energy_products(request):
    products = EnergyProduct.objects.all()
    return render(request, 'main/list_energy_products.html', {'products': products})

@login_required
def edit_energy_product(request, pk):
    product = get_object_or_404(EnergyProduct, pk=pk)
    if request.method == 'POST':
        form = EnergyProductForm(request.POST, instance=product)
        if form.is_valid():
            form.save()
            return redirect('list_energy_products')
    else:
        form = EnergyProductForm(instance=product)
    return render(request, 'main/edit_energy_product.html', {'form': form})

@login_required
def delete_energy_product(request, pk):
    product = get_object_or_404(EnergyProduct, pk=pk)
    if request.method == 'POST':
        product.delete()
        return redirect('list_energy_products')
    return render(request, 'main/delete_energy_product.html', {'product': product})


@login_required
def create_energy_consumption(request):
    if request.method == 'POST':
        form = EnergyConsumptionForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('list_energy_consumptions')
    else:
        form = EnergyConsumptionForm()
    return render(request, 'main/create_energy_consumption.html', {'form': form})

@login_required
def list_energy_consumptions(request):
    consumptions = EnergyConsumption.objects.all()
    return render(request, 'main/list_energy_consumptions.html', {'consumptions': consumptions})

@login_required
def edit_energy_consumption(request, pk):
    consumption = get_object_or_404(EnergyConsumption, pk=pk)
    if request.method == 'POST':
        form = EnergyConsumptionForm(request.POST, instance=consumption)
        if form.is_valid():
            form.save()
            return redirect('list_energy_consumptions')
    else:
        form = EnergyConsumptionForm(instance=consumption)
    return render(request, 'main/edit_energy_consumption.html', {'form': form})

@login_required
def delete_energy_consumption(request, pk):
    consumption = get_object_or_404(EnergyConsumption, pk=pk)
    if request.method == 'POST':
        consumption.delete()
        return redirect('list_energy_consumptions')
    return render(request, 'main/delete_energy_consumption.html', {'consumption': consumption})


@login_required
def create_consumer(request):
    if request.method == 'POST':
        form = ConsumerForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('list_consumers')
    else:
        form = ConsumerForm()
    return render(request, 'main/create_consumer.html', {'form': form})

@login_required
def list_consumers(request):
    consumers = Consumer.objects.all()
    return render(request, 'main/list_consumers.html', {'consumers': consumers})

@login_required
def edit_consumer(request, pk):
    consumer = get_object_or_404(Consumer, pk=pk)
    if request.method == 'POST':
        form = ConsumerForm(request.POST, instance=consumer)
        if form.is_valid():
            form.save()
            return redirect('list_consumers')
    else:
        form = ConsumerForm(instance=consumer)
    return render(request, 'main/edit_consumer.html', {'form': form})

@login_required
def delete_consumer(request, pk):
    consumer = get_object_or_404(Consumer, pk=pk)
    if request.method == 'POST':
        consumer.delete()
        return redirect('list_consumers')
    return render(request, 'main/delete_consumer.html', {'consumer': consumer})
